{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/author.js","webpack://gatsby-starter-blog/./src/pages/blog.js"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","medium","location","siteTitle","title","posts","allMarkdownRemark","nodes","length","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"k6BAiDA,IA7Ce,WAAO,IAAD,IACXA,GAAOC,oBAAe,cAgBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEvC,OACI,uBAAKC,UAAU,UACX,gBAAC,EAAAC,EAAD,CACID,UAAU,gBACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARR,uBAUCZ,aAAA,EAAAA,EAAQa,OACL,uCACe,8BAASb,EAAOa,MAD/B,KAC+Cb,aAAA,EAAAA,EAAQc,UAAW,KADlE,IAGI,qBAAGC,KAAI,wBAAwBZ,aAAA,EAAAA,EAAQa,SAAR,KAA/B,wC,8FCyBpB,UA1DiB,SAAC,GAAwB,IAAD,EAArBlB,EAAqB,EAArBA,KAAMmB,EAAe,EAAfA,SAClBC,GAAY,UAAApB,EAAKG,KAAKC,oBAAV,eAAwBiB,QAAxB,QACZC,EAAQtB,EAAKuB,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAD,CAAQN,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,uLAUJ,gBAAC,IAAD,CAAQF,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,sBAAIK,MAAO,CAAEC,UAAU,SACpBL,EAAMM,KAAI,SAAAC,GACT,IAAMR,EAAQQ,EAAKC,YAAYT,OAASQ,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACE1B,UAAU,iBACV4B,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,wBAAMA,SAAS,YAAYjB,KAG/B,6BAAQQ,EAAKC,YAAYS,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAYY,aAAeb,EAAKc,SAE/CL,SAAS","file":"component---src-pages-blog-js-1f9558a42c2bc43c4ae6.js","sourcesContent":["import * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Author = () => {\n    const data = useStaticQuery(graphql`\n      query AuthorQuery {\n        site {\n            siteMetadata {\n              author {\n                name\n                summary\n              }\n              social {\n                medium\n              }\n            }\n          }\n      }\n    `)\n\n    const author = data.site.siteMetadata?.author\n    const social = data.site.siteMetadata?.social\n\n    return (\n        <div className=\"author\">\n            <StaticImage\n                className=\"author-avatar\"\n                layout=\"fixed\"\n                formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\n                src=\"../images/profile-pic.png\"\n                width={50}\n                height={50}\n                quality={95}\n                alt=\"Profile picture\"\n            />\n            {author?.name && (\n                <p>\n                    Written by <strong>{author.name}</strong> {author?.summary || null}\n                    {` `}\n                    <a href={`https://medium.com/${social?.medium || ``}`}>\n                        You should follow them on Medium\n            </a>\n                </p>\n            )}\n        </div>\n    )\n}\n\nexport default Author","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Author from \"../components/author\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst BlogPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Author />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Author />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}